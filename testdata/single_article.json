{
  "type_of": "article",
  "id": 164198,
  "title": "A DEV.to API client is born",
  "description": "",
  "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--R6V0DkpA--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--eMjbVEyE--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/y4qdkik3cvyrq0xxeosv.png",
  "readable_publish_date": "Sep  3",
  "social_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--jkARIf8Z--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--eMjbVEyE--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/y4qdkik3cvyrq0xxeosv.png",
  "tag_list": "go, opensource, tutorial",
  "tags": [
    "go",
    "opensource",
    "tutorial"
  ],
  "slug": "a-dev-to-api-client-is-born-29pj",
  "path": "/victoravelar/a-dev-to-api-client-is-born-29pj",
  "url": "https://dev.to/victoravelar/a-dev-to-api-client-is-born-29pj",
  "canonical_url": "https://dev.to/victoravelar/a-dev-to-api-client-is-born-29pj",
  "comments_count": 0,
  "positive_reactions_count": 6,
  "created_at": "2019-08-31T10:39:02Z",
  "edited_at": null,
  "crossposted_at": null,
  "published_at": "2019-09-03T11:07:53Z",
  "last_comment_at": "2019-09-03T11:07:53Z",
  "body_html": "<h1>\n  <a name=\"episode-2-project-foundation\" href=\"#episode-2-project-foundation\" class=\"anchor\">\n  </a>\n  Episode 2 - Project foundation\n</h1>\n\n<p>So let's get going, be sure to have golang installed in your computer, if like me you're using macOS and Homebrew then you just need to execute the following command:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>brew <span class=\"nb\">install </span>go\n</code></pre></div>\n\n\n\n<h2>\n  <a name=\"the-api-client\" href=\"#the-api-client\" class=\"anchor\">\n  </a>\n  The API client\n</h2>\n\n<p>The module we are going to create will showcase the top 10 links to avoid a huge display block.</p>\n\n<p>For this, we will need to access the information from <a href=\"https://docs.dev.to/api\">devto API</a> and for this, we need code to programmatically access this information and be able to use it.</p>\n\n<p>So let's start</p>\n\n<h2>\n  <a name=\"the-project-directory\" href=\"#the-project-directory\" class=\"anchor\">\n  </a>\n  The project directory\n</h2>\n\n<p>Open a terminal window and navigate to the place where you store your go code, thanks to the implementation of go modules it doesn't need to be the <code>src</code> folder inside the $GOPATH so I will navigate to <code>~/Code</code> on my terminal.</p>\n\n<p>We are going to create the directory in which our module is going to live and then we will go inside the recently created folder, you can accomplish this by executing the following<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nb\">mkdir </span>devto-api-go <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd </span>devto-api-go\n</code></pre></div>\n\n\n\n<h2>\n  <a name=\"initializing-go-modules-support\" href=\"#initializing-go-modules-support\" class=\"anchor\">\n  </a>\n  Initializing Go modules support\n</h2>\n\n<p>To initialize a Go module you need to execute the <code>init</code> command of the go mod tool, so let's do it, first I will put the \"template\" and then the actual execution, I like to do this because that is how my brain stores information, so sorry if it's confusing.</p>\n\n<blockquote>\n<p>‚ö†Ô∏è This is important ‚ö†Ô∏è as you learn go you will <br>\nunderstand that some of the go tooling for using third party code <br>\nrelies on git features.</p>\n\n<p>So when initializing a module you should use the path to your <br>\nrepository in the form of <code>{provider}/{username}/{repository}</code></p>\n</blockquote>\n\n<p>I like to think of it as a mock for the folder structure I would have created if using the $GOPATH.</p>\n\n<p>So from now on, I will use <code>path-to-your-repo</code> to alias the composition described in my previous quote.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"c\"># Template for initializing a new go module once you're inside the </span>\n<span class=\"c\"># project directory</span>\ngo mod init <span class=\"o\">{</span>path-to-your-repo<span class=\"o\">}</span>\n</code></pre></div>\n\n\n\n<p>Which for our project will be<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"c\"># Template for initializing a new go module once you're inside the </span>\n<span class=\"c\"># project directory</span>\ngo mod init github.com/VictorAvelar/devto-api-go\n</code></pre></div>\n\n\n\n<p>Please don't be surprised if nothing comes back, you will also get used to the fact that in go, no news are amazing news üòÇ</p>\n\n<h2>\n  <a name=\"the-final-touch\" href=\"#the-final-touch\" class=\"anchor\">\n  </a>\n  The final touch\n</h2>\n\n<p>Once our module is ready, you can create a folder called <code>devto</code>, there is no reason for this, it is a thing I picked, but I cannot remember how ü§î, but it will be useful in the future, I can promise that.</p>\n\n<p>Finally this is how your <code>go.mod</code> file should look like<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight go\"><code><span class=\"n\">module</span> <span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">VictorAvelar</span><span class=\"o\">/</span><span class=\"n\">devto</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">-</span><span class=\"k\">go</span>\n\n<span class=\"k\">go</span> <span class=\"m\">1.12</span>\n</code></pre></div>\n\n\n\n",
  "body_markdown": "# Episode 2 - Project foundation\n\nSo let's get going, be sure to have golang installed in your computer, if like me you're using macOS and Homebrew then you just need to execute the following command:\n\n```bash\nbrew install go\n```\n\n## The API client\n\nThe module we are going to create will showcase the top 10 links to avoid a huge display block.\n\nFor this, we will need to access the information from [devto API](https://docs.dev.to/api) and for this, we need code to programmatically access this information and be able to use it.\n\nSo let's start\n\n## The project directory\n\nOpen a terminal window and navigate to the place where you store your go code, thanks to the implementation of go modules it doesn't need to be the `src` folder inside the $GOPATH so I will navigate to `~/Code` on my terminal.\n\nWe are going to create the directory in which our module is going to live and then we will go inside the recently created folder, you can accomplish this by executing the following\n\n```bash\nmkdir devto-api-go && cd devto-api-go\n```\n\n## Initializing Go modules support\n\nTo initialize a Go module you need to execute the `init` command of the go mod tool, so let's do it, first I will put the \"template\" and then the actual execution, I like to do this because that is how my brain stores information, so sorry if it's confusing.\n\n> :warning: This is important :warning: as you learn go you will \n> understand that some of the go tooling for using third party code \n> relies on git features.\n>\n> So when initializing a module you should use the path to your \n> repository in the form of `{provider}/{username}/{repository}`\n\nI like to think of it as a mock for the folder structure I would have created if using the $GOPATH.\n\nSo from now on, I will use `path-to-your-repo` to alias the composition described in my previous quote.\n\n```bash\n# Template for initializing a new go module once you're inside the \n# project directory\ngo mod init {path-to-your-repo}\n```\n\nWhich for our project will be\n\n```bash\n# Template for initializing a new go module once you're inside the \n# project directory\ngo mod init github.com/VictorAvelar/devto-api-go\n```\nPlease don't be surprised if nothing comes back, you will also get used to the fact that in go, no news are amazing news :joy:\n\n## The final touch\n\nOnce our module is ready, you can create a folder called `devto`, there is no reason for this, it is a thing I picked, but I cannot remember how :thinking:, but it will be useful in the future, I can promise that.\n\nFinally this is how your `go.mod` file should look like\n\n```go\nmodule github.com/VictorAvelar/devto-api-go\n\ngo 1.12\n```",
  "user": {
    "name": "Victor Hugo Avelar",
    "username": "victoravelar",
    "twitter_username": "VictorAvelar",
    "github_username": "VictorAvelar",
    "website_url": "https://victoravelar.com",
    "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--9EtUW1Uc--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/31936/182c75fc-af41-4312-9d9d-894c9f892e53.jpeg",
    "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--WZrBQD4d--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/31936/182c75fc-af41-4312-9d9d-894c9f892e53.jpeg"
  }
}